D:\injector\BearLicense\owner-app\src\main\java\com\bearmod\owner\MainActivity.kt:184: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                Text("Current Balance: $${String.format("%.2f", selected?.balance ?: 0.0)}")
                                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\injector\BearLicense\owner-app\src\main\java\com\bearmod\owner\MainActivity.kt:203: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                                host.showSnackbar("Transferred $${String.format("%.2f", amt)} to ${sel.username}")
                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\injector\BearLicense\owner-app\src\main\java\com\bearmod\owner\MainActivity.kt:263: Warning: Implicitly using the default locale is a common source of bugs: Use String.format(Locale, ...) instead [DefaultLocale]
                        Text("$${String.format("%.2f", s.balance)}", style = MaterialTheme.typography.labelMedium)
                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "DefaultLocale":
   Calling String#toLowerCase() or #toUpperCase() without specifying an
   explicit locale is a common source of bugs. The reason for that is that
   those methods will use the current locale on the user's device, and even
   though the code appears to work correctly when you are developing the app,
   it will fail in some locales. For example, in the Turkish locale, the
   uppercase replacement for i is not I.

   If you want the methods to just perform ASCII replacement, for example to
   convert an enum name, call String#toUpperCase(Locale.ROOT) instead. If you
   really want to use the current locale, call
   String#toUpperCase(Locale.getDefault()) instead.

   https://developer.android.com/reference/java/util/Locale.html#default_locale

D:\injector\BearLicense\owner-app\src\main\java\com\bearmod\owner\MainActivity.kt:72: Hint: Prefer mutableIntStateOf instead of mutableStateOf [AutoboxingStateCreation from androidx.compose.runtime]
    var tab by remember { mutableStateOf(0) } // 0 Flags, 1 User Controls, 2 Seller Mgmt
                          ~~~~~~~~~~~~~~

   Explanation for issues of type "AutoboxingStateCreation":
   Calling mutableStateOf<T>() when T is either backed by a primitive type on
   the JVM or is a value class results in a state implementation that requires
   all state values to be boxed. This usually causes an additional allocation
   for each state write, and adds some additional work to auto-unbox values
   when reading the value of the state. Instead, prefer to use a specialized
   primitive state implementation for Int, Long, Float, and Double when the
   state does not need to track null values and does not override the default
   SnapshotMutationPolicy. See mutableIntStateOf(), mutableLongStateOf(),
   mutableFloatStateOf(), and mutableDoubleStateOf() for more information.

   Vendor: Jetpack Compose
   Identifier: androidx.compose.runtime
   Feedback: https://issuetracker.google.com/issues/new?component=612128

D:\injector\BearLicense\owner-app\src\main\AndroidManifest.xml:3: Warning: Should explicitly set android:icon, there is no default [MissingApplicationIcon]
    <application
     ~~~~~~~~~~~

   Explanation for issues of type "MissingApplicationIcon":
   You should set an icon for the application as whole because there is no
   default. This attribute must be set as a reference to a drawable resource
   containing the image (for example @drawable/icon).

   https://developer.android.com/studio/publish/preparing#publishing-configure

D:\injector\BearLicense\owner-app\build.gradle.kts:47: Warning: Use version catalog instead (androidx.compose.material3:material3 is already available as androidx-material3, but using version 1.3.0 instead) [UseTomlInstead]
    implementation("androidx.compose.material3:material3")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UseTomlInstead":
   If your project is using a libs.versions.toml file, you should place all
   Gradle dependencies in the TOML file. This lint check looks for version
   declarations outside of the TOML file and suggests moving them (and in the
   IDE, provides a quickfix to performing the operation automatically).

0 errors, 5 warnings, 1 hint
